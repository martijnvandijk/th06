@startuml
skinparam classAttributeIconSize 0
left to right direction

package WashingMachine {
	abstract class WashingMachineBoundary<<abstract>> {
		- requestByteMap: std::unordered_map
		- responseByteMap: std::unordered_map
		+ sendHardwareRequest(HardwareRequest request): hardwareResponse
	}

	abstract class Observable<<abstract>> {
		- listeners: std::vector
		+ subscribe()
		+ poll()
	}

	class SensorHandler<<task>>

	interface SensorListener<<Interface>> {
		+ field: type
		+ update(observable,data)
	}


	class Watervalve<<boundary>>
	class Motor<<boundary>>
	class LED<<boundary>>
	class HeatingUnit<<boundary>>
	class SoapDispenser<<boundary>>
	class Pump<<boundary>> {
		+ getStatus(): bool
	}
	class Door<<boundary>>

	class TemperatureSensor<<boundary>>
	class WaterlevelSensor<<boundary>>


	WashingMachineBoundary  <|--    Watervalve : Extends
	WashingMachineBoundary  <|--    Motor : Extends
	WashingMachineBoundary  <|--    LED : Extends
	WashingMachineBoundary  <|--    HeatingUnit : Extends
	WashingMachineBoundary  <|--    SoapDispenser : Extends
	WashingMachineBoundary  <|--    Pump : Extends
	WashingMachineBoundary  <|--    Door : Extends

	TemperatureSensor       --|>    WashingMachineBoundary : Extends
	WaterlevelSensor        --|>    WashingMachineBoundary : Extends

	Observable              ..|>    TemperatureSensor : Implements
	Observable              ..|>    WaterlevelSensor : Implements

	Observable              <--o "0..*"     SensorHandler
	Observable          "1" o-->            SensorListener
}

class UpdateController<<control>>
class WashingController<<controller>>
class AuthorizationController<<control>>
class WebInterfaceHandler<<thread>>
class SettingsController<<control>>

class WebSocketHandler<<thread>>

class LogController<<control>>
class LogFile<<boundary>>

class WashingProgram<<Object>>
class WashingTask<<Object>>
abstract class WashingInstruction<<Object>>


AuthorizationController   <--o "1"  WebInterfaceHandler
UpdateController      "1" o--> "1"  WebInterfaceHandler
WashingController         <--o "1"  WebInterfaceHandler
WebInterfaceHandler   "1" o->       SettingsController
WebInterfaceHandler   "1" o->       WashingMachineBoundary
WebInterfaceHandler   "1" o->       Observable

WebSocketHandler          <-o "1"   WashingController
LogController             <-o "1"   WashingController
	LogFile               *->       LogController

WashingController     "1" o-->      WashingProgram
WashingProgram     "0..*" o-->      WashingTask
WashingTask           "1" o-->      WashingInstruction
WashingInstruction    "1" o->       WashingMachineBoundary
WashingInstruction    "1" o->       Observable

WashingController         ..|>      SensorListener
@enduml

@startuml
skinparam classAttributeIconSize 0
left to right direction

package WashingMachine {
	abstract class WashingMachineBoundary<<abstract>> {
		- requestByteMap: std::unordered_map
		- responseByteMap: std::unordered_map
		+ sendHardwareRequest(HardwareRequest request): hardwareResponse
	}

	abstract class Observable<<abstract>> {
		- listeners: std::vector
		+ subscribe()
		+ poll()
	}

	interface SensorListener<<Interface>> {
		+ field: type
		+ update(observable,data)
	}
}

class UpdateController<<control>>
class WashingController<<controller>>
class AuthorizationController<<control>>
class WebInterfaceHandler<<thread>>
class SettingsController<<control>>

class WebSocketHandler<<thread>>

class LogController<<control>>
class LogFile<<boundary>>

class WashingProgram<<Object>>
class WashingTask<<Object>>
abstract class WashingInstruction<<Object>>


AuthorizationController   <--o "1"  WebInterfaceHandler
UpdateController      "1" o--> "1"  WebInterfaceHandler
WashingController         <--o "1"  WebInterfaceHandler
WebInterfaceHandler   "1" o->       SettingsController
WebInterfaceHandler   "1" o->       WashingMachineBoundary
WebInterfaceHandler   "1" o->       Observable

WebSocketHandler          <-o "1"   WashingController
WashingController     "1" o->       LogController
	LogController         *->       LogFile

WashingController     "1" o-->      WashingProgram
WashingProgram     "0..*" o-->      WashingTask
WashingTask           "1" o-->      WashingInstruction
WashingInstruction    "1" o->       WashingMachineBoundary
WashingInstruction    "1" o->       Observable

WashingController         ..|>      SensorListener
@enduml

@startuml
skinparam classAttributeIconSize 0
left to right direction

package WashingMachine {
	abstract class WashingMachineBoundary<<abstract>> {
		- requestByteMap: std::unordered_map
		- responseByteMap: std::unordered_map
		+ sendHardwareRequest(HardwareRequest request): hardwareResponse
	}

	abstract class Observable<<abstract>> {
		- listeners: std::vector
		+ subscribe()
		+ poll()
	}

	class SensorHandler<<task>>

	interface SensorListener<<Interface>> {
		+ field: type
		+ update(observable,data)
	}

	class Watervalve<<boundary>>
	class Motor<<boundary>>
	class LED<<boundary>>
	class HeatingUnit<<boundary>>
	class SoapDispenser<<boundary>>
	class Pump<<boundary>> {
		+ getStatus(): bool
	}
	class Door<<boundary>>

	class TemperatureSensor<<boundary>>
	class WaterlevelSensor<<boundary>>


	WashingMachineBoundary  <|--    Watervalve : Extends
	WashingMachineBoundary  <|--    Motor : Extends
	WashingMachineBoundary  <|--    LED : Extends
	WashingMachineBoundary  <|--    HeatingUnit : Extends
	WashingMachineBoundary  <|--    SoapDispenser : Extends
	WashingMachineBoundary  <|--    Pump : Extends
	WashingMachineBoundary  <|--    Door : Extends

	TemperatureSensor       <|--    WashingMachineBoundary : Extends
	WaterlevelSensor        <|--    WashingMachineBoundary : Extends

	Observable              ..|>    TemperatureSensor : Implements
	Observable              ..|>    WaterlevelSensor : Implements

	Observable              <--o "0..*"     SensorHandler
	Observable          "1" o-->            SensorListener
}
@enduml
@startuml
'left to right direction'

package WashingMachine{
    Class UARTHandler{
        +UARTHandler(&serial : LibSerial)
        +void SendMessage(m : UARTMessage)
        -void main()
        -InputBuffer : RTOS::channel<UARTMessage, 64>
        -timer : RTOS::timer
        -OutputBuffer : std::queue<UARTMessage>
    }
    Class UARTUser{
        #replyPool : RTOS::pool<uint8_t>
        #virtual void main() = 0
        +UARTUser(priority : unsigned int, *name : const char = " ")
        +virtual void receiveReply(replyByte : uint8_t)
        +virtual uint8_t getReplyPoolContents()
    }
    Class Observable <<Abstract>>{
        +void subscribe(*listener : SensorListener)
        +virtual int poll(*referenceUser : UARTUser)
        #void updateAll(newVal : int)
        -listeners : std::vector<SensorListeners*>
    }
    Class SensorHandler{
        +SensorHandler()
        +void addSensor()
        #virtual void main()
        #sensors : std::vector<Observable*>
    }
    Class SensorListener <<Interface>>{
        +virtual void update(newVal : int)
    }
    Class SignalLed <<Boundary>>{
        +SignalLed(&uart : UARTHandler)
        +SignalLedState getStatus(*referenceUSER : UARTUser)
        +void set(status : SignalLedState, *referenceUser : UARTUser)
        +void toggle(*referenceUser : UARTUser)
        -&uart : UARTHandler
    }
    Class SoapDispenser <<Boundary>>{
        +SoapDispenser(&uart : UARTHandler)
        +SoapDispenserState getState(*referenceUser : UARTUser)
        +void set(state : SoapDispenserState, *referenceUser : UARTUser)
        +void toggle(*referenceUser UARTUser)
        -&uart UARTHandler
    }
    Class WaterValve <<Boundary>>{
        +WaterValve(&uart : UARTHandler)
        +WatervalveState getState(*referenceUSER : UARTUser)
        +void set(state WaterValveState, *referenceUser : UARTUser)
        +void toggle(*referenceUser : UARTUser)
        -&uart UARTHandler
    }
    Class Door <<Boundary>>{
        +Door(&uart : UARTHandler)
        +
    }
    Class HeatingUnit <<Boundary>>
    Class Motor <<Boundary>>
    Class Pump <<Boundary>>
    Class TemperatureSensor <<Boundary>>
    Class WaterLevelSensor <<Boundary>>
    Class WashingMachine

    enum SignalLedState<<Enumeration>>{
        LED_ON
        LED_OFF
    }
    enum SoapDispenserState{
        SOAP_OPEN
        SOAP_CLOSED
    }
    enum WaterValveState{
        VALVE_OPEN
        VALVE_CLOSED
    }

    SignalLedState -- SignalLed
    SoapDispenserState -- SoapDispenser
    WaterValveState -- WaterValve

    UARTUser <|-- UARTHandler : Extends
    WashingMachine *-- SignalLed
    WashingMachine *-- SoapDispenser
    WashingMachine *-- WaterValve
    WashingMachine *-- Door
    WashingMachine *-- HeatingUnit
    WashingMachine *-- Motor
    WashingMachine *-- Pump
    WashingMachine *-- TemperatureSensor
    WashingMachine *-- WaterLevelSensor

	Observable <-o SensorHandler
	Observable o-- SensorListener

	WaterLevelSensor --|> Observable : Extends
	TemperatureSensor --|> Observable : Extends

    UARTHandler o-- WashingMachine
    UARTHandler o-- SignalLed
    UARTHandler o-- SoapDispenser
    UARTHandler o-- WaterValve
    UARTHandler o-- Door
    UARTHandler o-- HeatingUnit
    UARTHandler o-- Motor
    UARTHandler o-- Pump
    UARTHandler o-- TemperatureSensor
    UARTHandler o-- WaterLevelSensor
}

package washingInstructions{
    Class AddSoapInstruction
    Class SetDoorLockInstruction
    Class SetRPMInstruction
    Class SetTemperatureInstruction
    Class SetWaterLevelInstruction
    Class WaitTimeInstruction
}
    Class WashingInstruction
    Class LogController<<Controller>>
    Class TemperatureRegulator<<Interface>>
    Class WashingController<<Controller>>
    Class WashingProgram
    Class WashingTask
    Class WaterLevelController<<Controller>>
    Class WaterLevelRegulator<<Interface>>
    Class TemperatureController<<Controller>>

    WaterLevelController o-- Pump
    WaterLevelController o-- WaterValve
    WaterLevelController o-- SensorListener
    WaterLevelController o-- UARTUser
    WaterLevelRegulator <|-- WaterLevelController : Extends

    TemperatureController o-- HeatingUnit
    TemperatureController o-- SensorListener
    TemperatureController o-- UARTUser
    TemperatureRegulator <|-- TemperatureController : Extends

    UARTUser --o WashingInstruction
    WashingProgram o- WashingTask
    WashingTask o- WashingInstruction
    WashingController o- WashingProgram
    WashingController o-- LogController

    WashingInstruction <|-- AddSoapInstruction :Extends
    WashingInstruction <|-- SetDoorLockInstruction :Extends
    WashingInstruction <|-- SetRPMInstruction :Extends
    WashingInstruction <|-- SetTemperatureInstruction :Extends
    WashingInstruction <|-- SetWaterLevelInstruction :Extends
    WashingInstruction <|-- WaitTimeInstruction :Extends

    AddSoapInstruction o-- SoapDispenser
    SetDoorLockInstruction o-- Door
    SetRPMInstruction o-- Motor
    SetTemperatureInstruction o-- TemperatureController
    SetWaterLevelInstruction o-- WaterLevelController

@enduml
