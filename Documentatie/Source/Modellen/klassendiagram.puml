@startuml
skinparam classAttributeIconSize 0
left to right direction

package WashingMachine {
	abstract class WashingMachineBoundary<<abstract>> {
		- requestByteMap: std::unordered_map
		- responseByteMap: std::unordered_map
		+ sendHardwareRequest(HardwareRequest request): hardwareResponse
	}

	abstract class Observable<<abstract>> {
		- listeners: std::vector
		+ subscribe()
		+ poll()
	}

	class SensorHandler<<task>>

	interface SensorListener<<Interface>> {
		+ field: type
		+ update(observable,data)
	}


	class Watervalve<<boundary>>
	class Motor<<boundary>>
	class LED<<boundary>>
	class HeatingUnit<<boundary>>
	class SoapDispenser<<boundary>>
	class Pump<<boundary>> {
		+ getStatus(): bool
	}
	class Door<<boundary>>

	class TemperatureSensor<<boundary>>
	class WaterlevelSensor<<boundary>>


	WashingMachineBoundary  <|--    Watervalve : Extends
	WashingMachineBoundary  <|--    Motor : Extends
	WashingMachineBoundary  <|--    LED : Extends
	WashingMachineBoundary  <|--    HeatingUnit : Extends
	WashingMachineBoundary  <|--    SoapDispenser : Extends
	WashingMachineBoundary  <|--    Pump : Extends
	WashingMachineBoundary  <|--    Door : Extends

	TemperatureSensor       <|--    WashingMachineBoundary : Extends
	WaterlevelSensor        <|--    WashingMachineBoundary : Extends

	Observable              ..|>    TemperatureSensor : Implements
	Observable              ..|>    WaterlevelSensor : Implements

	Observable              <--o "0..*"     SensorHandler
	Observable          "1" o-->            SensorListener
}

class UpdateController<<control>>
class WashingController<<controller>>
class AuthorizationController<<control>>
class WebInterfaceHandler<<thread>>
class SettingsController<<control>>

class WebSocketHandler<<thread>>

class LogController<<control>>
class LogFile<<boundary>>

class WashingProgram<<Object>>
class WashingTask<<Object>>
abstract class WashingInstruction<<Object>>


AuthorizationController   <--o "1"  WebInterfaceHandler
UpdateController      "1" o--> "1"  WebInterfaceHandler
WashingController         <--o "1"  WebInterfaceHandler
WebInterfaceHandler   "1" o->       SettingsController
WebInterfaceHandler   "1" o->       WashingMachineBoundary
WebInterfaceHandler   "1" o->       Observable

WebSocketHandler          <-o "1"   WashingController
LogController             <-o "1"   WashingController
	LogFile               *->       LogController

WashingController     "1" o-->      WashingProgram
WashingProgram     "0..*" o-->      WashingTask
WashingTask           "1" o-->      WashingInstruction
WashingInstruction    "1" o->       WashingMachineBoundary
WashingInstruction    "1" o->       Observable

WashingController         ..|>      SensorListener
@enduml

@startuml
skinparam classAttributeIconSize 0
left to right direction

package WashingMachine {
	abstract class WashingMachineBoundary<<abstract>> {
		- requestByteMap: std::unordered_map
		- responseByteMap: std::unordered_map
		+ sendHardwareRequest(HardwareRequest request): hardwareResponse
	}

	abstract class Observable<<abstract>> {
		- listeners: std::vector
		+ subscribe()
		+ poll()
	}

	interface SensorListener<<Interface>> {
		+ field: type
		+ update(observable,data)
	}
}

class UpdateController<<control>>
class WashingController<<controller>>
class AuthorizationController<<control>>
class WebInterfaceHandler<<thread>>
class SettingsController<<control>>

class WebSocketHandler<<thread>>

class LogController<<control>>
class LogFile<<boundary>>

class WashingProgram<<Object>>
class WashingTask<<Object>>
abstract class WashingInstruction<<Object>>


AuthorizationController   <--o "1"  WebInterfaceHandler
UpdateController      "1" o--> "1"  WebInterfaceHandler
WashingController         <--o "1"  WebInterfaceHandler
WebInterfaceHandler   "1" o->       SettingsController
WebInterfaceHandler   "1" o->       WashingMachineBoundary
WebInterfaceHandler   "1" o->       Observable

WebSocketHandler          <-o "1"   WashingController
WashingController     "1" o->       LogController
	LogController         *->       LogFile

WashingController     "1" o-->      WashingProgram
WashingProgram     "0..*" o-->      WashingTask
WashingTask           "1" o-->      WashingInstruction
WashingInstruction    "1" o->       WashingMachineBoundary
WashingInstruction    "1" o->       Observable

WashingController         ..|>      SensorListener
@enduml

@startuml
skinparam classAttributeIconSize 0
left to right direction

package WashingMachine {
	abstract class WashingMachineBoundary<<abstract>> {
		- requestByteMap: std::unordered_map
		- responseByteMap: std::unordered_map
		+ sendHardwareRequest(HardwareRequest request): hardwareResponse
	}

	abstract class Observable<<abstract>> {
		- listeners: std::vector
		+ subscribe()
		+ poll()
	}

	class SensorHandler<<task>>

	interface SensorListener<<Interface>> {
		+ field: type
		+ update(observable,data)
	}

	class Watervalve<<boundary>>
	class Motor<<boundary>>
	class LED<<boundary>>
	class HeatingUnit<<boundary>>
	class SoapDispenser<<boundary>>
	class Pump<<boundary>> {
		+ getStatus(): bool
	}
	class Door<<boundary>>

	class TemperatureSensor<<boundary>>
	class WaterlevelSensor<<boundary>>


	WashingMachineBoundary  <|--    Watervalve : Extends
	WashingMachineBoundary  <|--    Motor : Extends
	WashingMachineBoundary  <|--    LED : Extends
	WashingMachineBoundary  <|--    HeatingUnit : Extends
	WashingMachineBoundary  <|--    SoapDispenser : Extends
	WashingMachineBoundary  <|--    Pump : Extends
	WashingMachineBoundary  <|--    Door : Extends

	TemperatureSensor       <|--    WashingMachineBoundary : Extends
	WaterlevelSensor        <|--    WashingMachineBoundary : Extends

	Observable              ..|>    TemperatureSensor : Implements
	Observable              ..|>    WaterlevelSensor : Implements

	Observable              <--o "0..*"     SensorHandler
	Observable          "1" o-->            SensorListener
}
@enduml
